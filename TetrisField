package tetris;

// AWTライブラリをインポート
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent; // アクションイベントクラスをインポート
import java.awt.event.ActionListener; // アクションリスナーをインポート
import java.awt.event.KeyAdapter; // キーイベントを処理するためのクラスをインポート
import java.awt.event.KeyEvent; // キーイベントクラスをインポート

// AWTライブラリをインポート
// Swingライブラリをインポート
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

public class TetrisField extends JPanel { // TetrisFieldクラスはJPanelを継承
    private static final int BLOCK_SIZE = 30; // ブロックのサイズを定義
    private static final int ROWS = 20; // フィールドの行数を定義
    private static final int COLS = 10; // フィールドの列数を定義
    private static final int WIDTH = COLS * BLOCK_SIZE; // フィールドの幅を定義
    private static final int HEIGHT = ROWS * BLOCK_SIZE; // フィールドの高さを定義

    private int[][] grid; // グリッドの状態を保持する配列
    private Tetromino currentTetromino; // 現在のテトリミノを保持
    private int currentRow; // テトリミノの現在の行位置
    private int currentCol; // テトリミノの現在の列位置
    private Timer timer; // タイマー

    public TetrisField() { // コンストラクタ
        setPreferredSize(new Dimension(WIDTH, HEIGHT)); // パネルの推奨サイズを設定
        setBackground(Color.BLACK); // 背景色を黒に設定
        grid = new int[ROWS][COLS]; // グリッドを初期化

        // グリッドを初期化
        initGrid();
        // ランダムなテトリミノを設定
        setTetromino(generateRandomTetromino()); // ランダムなテトリミノを設定

        // タイマーを設定してテトリミノを自由落下させる
        timer = new Timer(1000 / 60, new ActionListener() { // 60フレーム毎にアクションを実行
            private int frameCount = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                frameCount++;
                if (frameCount >= 60) { // 60フレームごとにテトリミノを落下させる
                    frameCount = 0;
                    moveTetrominoDown(); // テトリミノを一マス下に移動
                }
                repaint(); // 再描画を要求
            }
        });
        timer.start(); // タイマーを開始

        // キーリスナーを追加
        setFocusable(true); // パネルをフォーカス可能に設定
        addKeyListener(new KeyAdapter() { // キーリスナーを追加
            @Override
            public void keyPressed(KeyEvent e) { // キーが押されたときの処理
                handleKeyPress(e); // キー入力を処理
            }
        });
    }

    // グリッドを初期化
    private void initGrid() {
        for (int row = 0; row < ROWS; row++) { // 各行を初期化
            for (int col = 0; col < COLS; col++) { // 各列を初期化
                grid[row][col] = 0; // 空のセルは0とする
            }
        }
    }

    // グリッドを描画
    @Override
    protected void paintComponent(Graphics g) { // 描画コンポーネントをオーバーライド
        super.paintComponent(g); // 親クラスの描画メソッドを呼び出し
        drawGrid(g); // グリッドを描画
        drawTetromino(g); // テトリミノを描画
    }

    // グリッドを描画するメソッド
    private void drawGrid(Graphics g) {
        g.setColor(Color.GRAY); // グリッドの線の色を設定

        // グリッドの線を描画
        for (int row = 0; row < ROWS; row++) { // 各行を描画
            for (int col = 0; col < COLS; col++) { // 各列を描画
                g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // グリッドの枠線を描画
                if (grid[row][col] != 0) { // セルが空でない場合
                    drawBlock(g, row, col, grid[row][col]); // ブロックを描画
                }
            }
        }
    }

    // ブロックを描画するメソッド
    private void drawBlock(Graphics g, int row, int col, int colorIndex) {
        Color[] colors = {Color.BLACK, Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.ORANGE}; // 色の配列を定義
        g.setColor(colors[colorIndex]); // ブロックの色を設定
        g.fillRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // ブロックを塗りつぶし
        g.setColor(Color.WHITE); // 枠線の色を白に設定
        g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // 枠線を描画
    }

    // テトリミノを描画するメソッド
    private void drawTetromino(Graphics g) {
        int[][] coords = currentTetromino.getCoords(); // 現在のテトリミノの座標を取得
        for (int[] coord : coords) { // 各ブロックを描画
            int row = currentRow + coord[1]; // ブロックの行位置を計算
            int col = currentCol + coord[0]; // ブロックの列位置を計算
            drawBlock(g, row, col, currentTetromino.getShape().ordinal() + 1); // ブロックを描画
        }
    }

    // テトリミノを設定するメソッド
    public void setTetromino(Tetromino tetromino) {
        this.currentTetromino = tetromino; // テトリミノを設定
        this.currentRow = 0; // 行位置をリセット
        this.currentCol = COLS / 2 - 1; // 列位置をリセット
        repaint(); // 再描画を要求
    }

    // キー入力を処理するメソッド
    private void handleKeyPress(KeyEvent e) {
        switch (e.getKeyCode()) { // 押されたキーを判定
            case KeyEvent.VK_LEFT: // 左キーの場合
                moveTetromino(-1, 0); // テトリミノを左に移動
                break;
            case KeyEvent.VK_RIGHT: // 右キーの場合
                moveTetromino(1, 0); // テトリミノを右に移動
                break;
            case KeyEvent.VK_DOWN: // 下キーの場合
                moveTetromino(0, 1); // テトリミノを下に移動
                break;
        }
    }

    // テトリミノを移動するメソッド
    private void moveTetromino(int deltaX, int deltaY) {
        int newCol = currentCol + deltaX; // 新しい列位置を計算
        int newRow = currentRow + deltaY; // 新しい行位置を計算
        if (canMoveTo(newCol, newRow)) { // 移動可能かをチェック
            currentCol = newCol; // 列位置を更新
            currentRow = newRow; // 行位置を更新
            repaint(); // 再描画を要求
        } else if (deltaY != 0 && !canMoveTo(newCol, newRow)) { // 下に移動できない場合
            placeTetromino(); // テトリミノを配置
        }
    }

    // テトリミノを下に移動するメソッド
    private void moveTetrominoDown() {
        moveTetromino(0, 1); // 下に移動
    }

    // テトリミノを配置するメソッド
    private void placeTetromino() {
        int[][] coords = currentTetromino.getCoords(); // 現在のテトリミノの座標を取得
        for (int[] coord : coords) { // 各ブロックを配置
            int row = currentRow + coord[1]; // ブロックの行位置を計算
            int col = currentCol + coord[0]; // ブロックの列位置を計算
            grid[row][col] = currentTetromino.getShape().ordinal() + 1; // グリッドにブロックを配置
        }
        setTetromino(generateRandomTetromino()); // 新しいテトリミノを設定
    }

    // テトリミノが指定された位置に移動可能かをチェックするメソッド
    private boolean canMoveTo(int col, int row) {
        int[][] coords = currentTetromino.getCoords(); // 現在のテトリミノの座標を取得
        for (int[] coord : coords) { // 各ブロックをチェック
            int newCol = col + coord[0]; // 新しい列位置を計算
            int newRow = row + coord[1]; // 新しい行位置を計算
            if (newCol < 0 || newCol >= COLS || newRow < 0 || newRow >= ROWS) { // フィールドの範囲外かをチェック
                return false; // 移動不可
            }
            if (grid[newRow][newCol] != 0) { // 他のブロックと衝突するかをチェック
                return false; // 移動不可
            }
        }
        return true; // 移動可能
    }

    // ランダムなテトリミノを生成するメソッド
    private Tetromino generateRandomTetromino() {
        Tetromino.Shape[] shapes = Tetromino.Shape.values(); // すべてのテトリミノの形状を取得
        int index = (int) (Math.random() * shapes.length); // ランダムなインデックスを生成
        return new Tetromino(shapes[index]); // ランダムなテトリミノを生成
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Tetris Field"); // 新しいフレームを作成
        TetrisField tetrisField = new TetrisField(); // 新しいTetrisFieldを作成
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // フレームを閉じるときの動作を設定
        frame.add(tetrisField); // フレームにTetrisFieldを追加
        frame.pack(); // フレームのサイズを調整
        frame.setLocationRelativeTo(null); // フレームの位置を中央に設定
        frame.setVisible(true); // フレームを表示
    }
}

class Tetromino {
    public enum Shape { I, O, T, S, Z, J, L }
    private Shape shape;
    private int[][] coords;

    public Tetromino(Shape shape) {
        this.shape = shape;
        setShape(shape);
    }

    private void setShape(Shape shape) {
        switch (shape) {
            case I:
                coords = new int[][] {{0, 1}, {1, 1}, {2, 1}, {3, 1}};
                break;
            case O:
                coords = new int[][] {{0, 0}, {0, 1}, {1, 0}, {1, 1}};
                break;
            case T:
                coords = new int[][] {{1, 0}, {0, 1}, {1, 1}, {2, 1}};
                break;
            case S:
                coords = new int[][] {{1, 0}, {2, 0}, {0, 1}, {1, 1}};
                break;
            case Z:
                coords = new int[][] {{0, 0}, {1, 0}, {1, 1}, {2, 1}};
                break;
            case J:
                coords = new int[][] {{0, 0}, {0, 1}, {1, 1}, {2, 1}};
                break;
            case L:
                coords = new int[][] {{2, 0}, {0, 1}, {1, 1}, {2, 1}};
                break;
        }
    }

    public int[][] getCoords() {
        return coords;
    }

    public Shape getShape() {
        return shape;
    }
}
