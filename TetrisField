import java.awt.Color; // 色の定義をインポート
import java.awt.Dimension; // コンポーネントのサイズを設定するためのクラスをインポート
import java.awt.Graphics; // 描画用のクラスをインポート
import java.awt.event.ActionEvent; // アクションイベント用のクラスをインポート
import java.awt.event.ActionListener; // アクションイベントリスナー用のインターフェースをインポート
import java.awt.event.KeyAdapter; // キーイベント用のアダプタクラスをインポート
import java.awt.event.KeyEvent; // キーイベント用のクラスをインポート

import javax.swing.JFrame; // Swing のフレームクラスをインポート
import javax.swing.JPanel; // Swing のパネルクラスをインポート
import javax.swing.Timer; // Swing のタイマークラスをインポート

// TetrisField クラスの定義
public class TetrisField extends JPanel {
    private static final int BLOCK_SIZE = 30; // ブロックのサイズ
    private static final int ROWS = 20; // フィールドの行数
    private static final int COLS = 10; // フィールドの列数
    private static final int WIDTH = COLS * BLOCK_SIZE; // フィールドの幅
    private static final int HEIGHT = ROWS * BLOCK_SIZE; // フィールドの高さ

    private int[][] grid; // フィールドの状態を格納する配列
    private Tetromino currentTetromino; // 現在のテトリミノ
    private int currentRow; // テトリミノの現在の行
    private int currentCol; // テトリミノの現在の列
    private Timer timer; // ゲームのタイマー
    private boolean gameOver; // ゲームオーバーフラグ

    // TetrisField コンストラクタ
    public TetrisField() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT)); // パネルの推奨サイズを設定
        setBackground(Color.BLACK); // パネルの背景色を黒に設定
        grid = new int[ROWS][COLS]; // フィールドの状態を初期化
        initGrid(); // フィールドを初期化
        setTetromino(generateRandomTetromino()); // ランダムなテトリミノを生成して設定

        timer = new Timer(1000, new ActionListener() { // タイマーを1秒毎に動作するように設定
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!gameOver) { // ゲームオーバーでない場合のみ動作
                    moveTetrominoDown(); // テトリミノを下に移動
                }
                repaint(); // パネルを再描画
            }
        });
        timer.start(); // タイマーを開始

        setFocusable(true); // フォーカス可能に設定
        addKeyListener(new KeyAdapter() { // キーイベントリスナーを追加
            @Override
            public void keyPressed(KeyEvent e) {
                if (!gameOver) { // ゲームオーバーでない場合のみ動作
                    handleKeyPress(e); // キーが押されたときに呼び出す処理
                }
            }
        });
    }

    // フィールドを初期化
    private void initGrid() {
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLS; col++) {
                grid[row][col] = 0; // すべてのセルを0に設定
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawGrid(g); // グリッドを描画
        if (!gameOver) { // ゲームオーバーでない場合のみテトリミノを描画
            drawTetromino(g); // テトリミノを描画
        } else { // ゲームオーバーの場合
            g.setColor(Color.RED); // 色を赤に設定
            g.drawString("GAME OVER", WIDTH / 2 - 40, HEIGHT / 2); // "GAME OVER" テキストを表示
        }
    }

    private void drawGrid(Graphics g) {
        g.setColor(Color.GRAY); // 色を灰色に設定
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLS; col++) {
                g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // グリッドを描画
                if (grid[row][col] != 0) { // セルが空でない場合
                    drawBlock(g, row, col, grid[row][col]); // ブロックを描画
                }
            }
        }
    }

    private void drawBlock(Graphics g, int row, int col, int colorIndex) {
        Color[] colors = { Color.BLACK, Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.ORANGE }; // 色の配列
        g.setColor(colors[colorIndex]); // 色を設定
        g.fillRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // ブロックを塗りつぶし
        g.setColor(Color.WHITE); // 色を白に設定
        g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE); // ブロックの枠を描画
    }

    private void drawTetromino(Graphics g) {
        int[][] coords = currentTetromino.getCoords(); // テトリミノの座標を取得
        for (int[] coord : coords) { // テトリミノの各ブロックをループ
            int row = currentRow + coord[1]; // ブロックの行を計算
            int col = currentCol + coord[0]; // ブロックの列を計算
            drawBlock(g, row, col, currentTetromino.getShape().ordinal() + 1); // ブロックを描画
        }
    }

    public void setTetromino(Tetromino tetromino) {
        this.currentTetromino = tetromino; // 現在のテトリミノを設定
        this.currentRow = 0; // テトリミノの行を初期化
        this.currentCol = COLS / 2 - 2; // テトリミノの列を初期化
        if (!canMoveTo(currentCol, currentRow, tetromino.getCoords())) { // 新しいテトリミノが初期位置に置けない場合
            gameOver = true; // ゲームオーバー
            timer.stop(); // タイマーを停止
        }
        repaint(); // パネルを再描画
    }

    private void handleKeyPress(KeyEvent e) {
        switch (e.getKeyCode()) { // 押されたキーコードを判定
            case KeyEvent.VK_LEFT: // 左キー
                moveTetromino(-1, 0); // 左に移動
                break;
            case KeyEvent.VK_RIGHT: // 右キー
                moveTetromino(1, 0); // 右に移動
                break;
            case KeyEvent.VK_DOWN: // 下キー
                rotateTetromino(false); // 反時計回りに回転
                break;
            case KeyEvent.VK_UP: // 上キー
                rotateTetromino(true); // 時計回りに回転
                break;
            case KeyEvent.VK_SPACE: // スペースキー
                moveTetromino(0, 1); // 下に移動
        }
    }

    private void moveTetromino(int deltaX, int deltaY) {
        int newCol = currentCol + deltaX; // 新しい列を計算
        int newRow = currentRow + deltaY; // 新しい行を計算
        if (canMoveTo(newCol, newRow, currentTetromino.getCoords())) { // 新しい位置に移動可能か確認
            currentCol = newCol; // 新しい列を設定
            currentRow = newRow; // 新しい行を設定
            repaint(); // パネルを再描画
        } else if (deltaY != 0 && !canMoveTo(newCol, newRow, currentTetromino.getCoords())) { // 下方向に移動不可の場合
            placeTetromino(); // テトリミノを配置
        }
    }

    private void moveTetrominoDown() {
        moveTetromino(0, 1); // 下に1マス移動
    }

    private void placeTetromino() {
        int[][] coords = currentTetromino.getCoords(); // テトリミノの座標を取得
        for (int[] coord : coords) { // テトリミノの各ブロックをループ
            int row = currentRow + coord[1]; // ブロックの行を計算
            int col = currentCol + coord[0]; // ブロックの列を計算
            if (row >= 0 && row < ROWS && col >= 0 && col < COLS) { // フィールド内の有効な位置か確認
                grid[row][col] = currentTetromino.getShape().ordinal() + 1; // フィールドにテトリミノを配置
            }
        }
        clearLines(); // 揃った行を消去
        if (!gameOver) { // ゲームオーバーでない場合
            setTetromino(generateRandomTetromino()); // 新しいテトリミノを設定
        }
    }

    private void rotateTetromino(boolean clockwise) {
        currentTetromino.rotate(clockwise); // テトリミノを回転
        if (!canMoveTo(currentCol, currentRow, currentTetromino.getCoords())) { // 回転後の位置に移動不可の場合
            currentTetromino.rotate(!clockwise); // 元に戻す
        }
        repaint(); // パネルを再描画
    }

    private boolean canMoveTo(int col, int row, int[][] coords) {
        for (int[] coord : coords) { // テトリミノの各ブロックをループ
            int newCol = col + coord[0]; // 新しい列を計算
            int newRow = row + coord[1]; // 新しい行を計算
            if (newCol < 0 || newCol >= COLS || newRow >= ROWS || (newRow >= 0 && grid[newRow][newCol] != 0)) { // フィールド外またはブロックがある場合
                return false; // 移動不可
            }
        }
        return true; // 移動可能
    }

    private void clearLines() {
        for (int row = 0; row < ROWS; row++) { // 各行をループ
            boolean lineFilled = true; // 行が揃っているか確認するフラグ
            for (int col = 0; col < COLS; col++) { // 各列をループ
                if (grid[row][col] == 0) { // セルが空の場合
                    lineFilled = false; // 行は揃っていない
                    break; // 列のループを抜ける
                }
            }
            if (lineFilled) { // 行が揃っている場合
                for (int r = row; r > 0; r--) { // 行を上から下にシフト
                    for (int c = 0; c < COLS; c++) {
                        grid[r][c] = grid[r - 1][c]; // 上の行をコピー
                    }
                }
                for (int c = 0; c < COLS; c++) { // 最上行を空にする
                    grid[0][c] = 0;
                }
            }
        }
    }

    private Tetromino generateRandomTetromino() {
        Tetromino.Shape[] shapes = Tetromino.Shape.values(); // テトリミノの形の配列を取得
        int index = (int) (Math.random() * shapes.length); // ランダムなインデックスを生成
        return new Tetromino(shapes[index]); // ランダムな形のテトリミノを生成
    }

    // メインメソッド
    public static void main(String[] args) {
        JFrame frame = new JFrame("Tetris"); // 新しいフレームを作成
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // フレームが閉じられたときの動作を設定
        frame.add(new TetrisField()); // フレームに TetrisField を追加
        frame.pack(); // フレームをコンポーネントに合わせてパック
        frame.setVisible(true); // フレームを表示
    }

    // TetrominoクラスをTetrisFieldクラス内に定義
    private class Tetromino {
        private Shape shape; // テトリミノの形
        private int[][] coords; // テトリミノの座標

        // テトリミノの形の定義
        public enum Shape {
            I(new int[][] { { 0, -1 }, { 0, 0 }, { 0, 1 }, { 0, 2 } }),
            J(new int[][] { { -1, 0 }, { 0, 0 }, { 0, 1 }, { 0, 2 } }),
            L(new int[][] { { 1, 0 }, { 0, 0 }, { 0, 1 }, { 0, 2 } }),
            O(new int[][] { { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 } }),
            S(new int[][] { { 0, 0 }, { 1, 0 }, { -1, 1 }, { 0, 1 } }),
            T(new int[][] { { 0, 0 }, { 0, 1 }, { -1, 1 }, { 1, 1 } }),
            Z(new int[][] { { 0, 0 }, { -1, 0 }, { 0, 1 }, { 1, 1 } });

            private int[][] coords; // 座標配列

            Shape(int[][] coords) {
                this.coords = coords; // 座標配列を設定
            }

            public int[][] getCoords() {
                return coords; // 座標配列を取得
            }
        }

        public Tetromino(Shape shape) {
            this.shape = shape; // テトリミノの形を設定
            this.coords = shape.getCoords(); // 座標を取得
        }

        public Shape getShape() {
            return shape; // テトリミノの形を取得
        }

        public int[][] getCoords() {
            return coords; // 座標を取得
        }

        public void rotate(boolean clockwise) {
            if (shape == Shape.O) return; // O型は回転しない
            for (int i = 0; i < coords.length; i++) {
                int x = coords[i][0];
                int y = coords[i][1];
                if (clockwise) {
                    coords[i][0] = y;
                    coords[i][1] = -x;
                } else {
                    coords[i][0] = -y;
                    coords[i][1] = x;
                }
            }
        }
    }
}
