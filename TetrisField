import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class TetrisField extends JPanel {
    private static final int BLOCK_SIZE = 30; // ブロックのサイズ
    private static final int ROWS = 20; // 行数
    private static final int COLS = 10; // 列数
    private static final int WIDTH = COLS * BLOCK_SIZE;
    private static final int HEIGHT = ROWS * BLOCK_SIZE;

    private int[][] grid; // グリッドの状態
    private Tetromino currentTetromino;
    private int currentRow;
    private int currentCol;

    public TetrisField() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.BLACK);
        grid = new int[ROWS][COLS];

        // グリッドを初期化
        initGrid();
        // テトリミノを初期化
        currentTetromino = new Tetromino(Tetromino.Shape.T);
        currentRow = 0;
        currentCol = COLS / 2 - 1;

        // キーリスナーを追加
        setFocusable(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e);
            }
        });
    }

    // グリッドを初期化
    private void initGrid() {
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLS; col++) {
                grid[row][col] = 0; // 空のセルは0とする
            }
        }
    }

    // グリッドを描画
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawGrid(g);
        drawTetromino(g);
    }

    // グリッドを描画するメソッド
    private void drawGrid(Graphics g) {
        g.setColor(Color.GRAY);

        // グリッドの線を描画
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLS; col++) {
                g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                if (grid[row][col] != 0) {
                    drawBlock(g, row, col, grid[row][col]);
                }
            }
        }
    }

    // ブロックを描画するメソッド
    private void drawBlock(Graphics g, int row, int col, int colorIndex) {
        Color[] colors = {Color.BLACK, Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.ORANGE};
        g.setColor(colors[colorIndex]);
        g.fillRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        g.setColor(Color.WHITE);
        g.drawRect(col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    }

    // テトリミノを描画するメソッド
    private void drawTetromino(Graphics g) {
        int[][] coords = currentTetromino.getCoords();
        for (int[] coord : coords) {
            int row = currentRow + coord[1];
            int col = currentCol + coord[0];
            drawBlock(g, row, col, currentTetromino.getShape().ordinal() + 1);
        }
    }

    // テトリミノを設定するメソッド
    public void setTetromino(Tetromino tetromino) {
        this.currentTetromino = tetromino;
        this.currentRow = 0;
        this.currentCol = COLS / 2 - 1;
        repaint();
    }

    // キー入力を処理するメソッド
    private void handleKeyPress(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                moveTetromino(-1);
                break;
            case KeyEvent.VK_RIGHT:
                moveTetromino(1);
                break;
        }
    }

    // テトリミノを左右に移動するメソッド
    private void moveTetromino(int direction) {
        int newCol = currentCol + direction;
        if (canMoveTo(newCol, currentRow)) {
            currentCol = newCol;
            repaint();
        }
    }

    // テトリミノが指定された位置に移動可能かをチェックするメソッド
    private boolean canMoveTo(int col, int row) {
        int[][] coords = currentTetromino.getCoords();
        for (int[] coord : coords) {
            int newCol = col + coord[0];
            int newRow = row + coord[1];
            if (newCol < 0 || newCol >= COLS || newRow < 0 || newRow >= ROWS) {
                return false; // フィールドの範囲外
            }
            if (grid[newRow][newCol] != 0) {
                return false; // 他のブロックと衝突
            }
        }
        return true;
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Tetris Field");
        TetrisField tetrisField = new TetrisField();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(tetrisField);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // デモ用にテトリミノを設定
        tetrisField.setTetromino(new Tetromino(Tetromino.Shape.I));
    }
}
